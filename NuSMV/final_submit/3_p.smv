MODULE main
  VAR
	choosing : array 0..2 of boolean;
	number : array 0..2 of 0 .. 4;
	proc0 : process BE(choosing,number,0);
	proc1 : process BE(choosing,number,1);
	proc2 : process BE(choosing,number,2);
  ASSIGN
	init(choosing[0]) := FALSE;
	init(choosing[1]) := FALSE;
	init(choosing[2]) := FALSE;
	init(number[0]) := 0;
	init(number[1]) := 0;
	init(number[2]) := 0;
  SPEC AG ! (proc0.state = CS & proc1.state = CS)
  SPEC AG (proc1.state = wait -> AF proc1.state = CS)	

MODULE BE(choosing,number,i)
  VAR
	state : {NCS,CS,chsg,wait};

  DEFINE
	j := (i + 1) mod 3;
	k := (i + 2) mod 3;
  ASSIGN
	init(state) := NCS;
	next(choosing[i]) := case
	state = NCS &(number[i]=0): TRUE;
	state = chsg &(number[i] != 0) : FALSE;
        TRUE : choosing[i];
  esac;
  next(number[i]) := case
	state = NCS & (number[i]>0) &(choosing[i]=FALSE): 0;
	state = chsg & (choosing[i] = TRUE) : ((number[j] > 3 |number[k] >3 )? number[i] : max(number[j], number[k]) + 1) ;
        TRUE : number[i];
  esac;
next(state) := case
	state = NCS & (choosing[i] =FALSE) : state;
	state = NCS & (choosing[i] =TRUE) : chsg;
	state = wait & (number[j]!=0) & (number[i]>number[j]) | (number[k]!=0) & (number[i]>number[k]) : wait;
	state = chsg &(choosing[i]=FALSE) & (number[i]>2) &(number[j]=0):wait;
	state = wait & (choosing[j]=FALSE) & (choosing[k]=FALSE) & ((number[j]=0) & (number[k]=0)): wait;
	state = wait & (choosing[j]=FALSE) & (choosing[k]=FALSE) & ((number[j]=0) & (number[k]>number[i])) : CS;
	state = wait & (choosing[j]=FALSE) & (choosing[k]=FALSE) & ((number[k]=0) & (number[j]>number[i])) : CS;
	state = wait & (choosing[j]=FALSE) & (choosing[k]=FALSE) & ((number[j]>number[i]) & (number[k]>number[i])) : CS;
	state= CS : {CS, NCS};
	TRUE : state;
esac;
